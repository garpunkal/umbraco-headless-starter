// This file is auto-generated by @hey-api/openapi-ts

export const HomeContentModelSchema = {
    type: 'object',
    allOf: [
        {
            '$ref': '#/components/schemas/IApiContentModelBase'
        }
    ],
    properties: {
        properties: {
            '$ref': '#/components/schemas/HomePropertiesModel'
        }
    },
    additionalProperties: false
} as const;

export const HomeContentResponseModelSchema = {
    type: 'object',
    allOf: [
        {
            '$ref': '#/components/schemas/IApiContentResponseModelBase'
        },
        {
            '$ref': '#/components/schemas/HomeContentModel'
        }
    ],
    additionalProperties: false
} as const;

export const HomePropertiesModelSchema = {
    type: 'object',
    properties: {
        title: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const HttpValidationProblemDetailsSchema = {
    allOf: [
        {
            '$ref': '#/components/schemas/ProblemDetails'
        },
        {
            type: 'object',
            properties: {
                errors: {
                    type: 'object',
                    additionalProperties: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    }
                }
            },
            additionalProperties: {}
        }
    ]
} as const;

export const IApiContentModelSchema = {
    type: 'object',
    oneOf: [
        {
            '$ref': '#/components/schemas/HomeContentModel'
        }
    ],
    additionalProperties: false
} as const;

export const IApiContentModelBaseSchema = {
    required: ['contentType'],
    type: 'object',
    allOf: [
        {
            '$ref': '#/components/schemas/IApiElementModelBase'
        }
    ],
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        contentType: {
            type: 'string',
            readOnly: true
        },
        name: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        createDate: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        updateDate: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        route: {
            '$ref': '#/components/schemas/IApiContentRouteModel'
        }
    },
    additionalProperties: false,
    discriminator: {
        propertyName: 'contentType',
        mapping: {
            home: '#/components/schemas/HomeContentModel'
        }
    }
} as const;

export const IApiContentResponseModelSchema = {
    type: 'object',
    oneOf: [
        {
            '$ref': '#/components/schemas/HomeContentResponseModel'
        }
    ],
    additionalProperties: false
} as const;

export const IApiContentResponseModelBaseSchema = {
    required: ['contentType'],
    type: 'object',
    allOf: [
        {
            '$ref': '#/components/schemas/IApiContentModelBase'
        }
    ],
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        contentType: {
            type: 'string',
            readOnly: true
        },
        name: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        createDate: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        updateDate: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        route: {
            '$ref': '#/components/schemas/IApiContentRouteModel'
        },
        cultures: {
            type: 'object',
            additionalProperties: {
                '$ref': '#/components/schemas/IApiContentRouteModel'
            },
            readOnly: true
        }
    },
    additionalProperties: false,
    discriminator: {
        propertyName: 'contentType',
        mapping: {
            home: '#/components/schemas/HomeContentResponseModel'
        }
    }
} as const;

export const IApiContentRouteModelSchema = {
    type: 'object',
    properties: {
        path: {
            type: 'string',
            readOnly: true
        },
        startItem: {
            '$ref': '#/components/schemas/IApiContentStartItemModel'
        }
    },
    additionalProperties: false
} as const;

export const IApiContentStartItemModelSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        path: {
            type: 'string',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const IApiElementModelSchema = {
    type: 'object',
    additionalProperties: false
} as const;

export const IApiElementModelBaseSchema = {
    required: ['contentType'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        contentType: {
            type: 'string',
            readOnly: true
        }
    },
    additionalProperties: false,
    discriminator: {
        propertyName: 'contentType'
    }
} as const;

export const IApiMediaWithCropsResponseModelSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            readOnly: true
        },
        name: {
            type: 'string',
            readOnly: true
        },
        mediaType: {
            type: 'string',
            readOnly: true
        },
        url: {
            type: 'string',
            readOnly: true
        },
        extension: {
            type: 'string',
            nullable: true,
            readOnly: true
        },
        width: {
            type: 'integer',
            format: 'int32',
            nullable: true,
            readOnly: true
        },
        height: {
            type: 'integer',
            format: 'int32',
            nullable: true,
            readOnly: true
        },
        bytes: {
            type: 'integer',
            format: 'int32',
            nullable: true,
            readOnly: true
        },
        properties: {
            type: 'object',
            additionalProperties: {
                nullable: true
            },
            readOnly: true
        },
        focalPoint: {
            '$ref': '#/components/schemas/ImageFocalPointModel'
        },
        crops: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ImageCropModel'
            },
            nullable: true,
            readOnly: true
        },
        path: {
            type: 'string',
            readOnly: true
        },
        createDate: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        },
        updateDate: {
            type: 'string',
            format: 'date-time',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const ImageCropCoordinatesModelSchema = {
    type: 'object',
    properties: {
        x1: {
            type: 'number',
            format: 'double'
        },
        y1: {
            type: 'number',
            format: 'double'
        },
        x2: {
            type: 'number',
            format: 'double'
        },
        y2: {
            type: 'number',
            format: 'double'
        }
    },
    additionalProperties: false
} as const;

export const ImageCropModelSchema = {
    type: 'object',
    properties: {
        alias: {
            type: 'string',
            nullable: true
        },
        width: {
            type: 'integer',
            format: 'int32'
        },
        height: {
            type: 'integer',
            format: 'int32'
        },
        coordinates: {
            '$ref': '#/components/schemas/ImageCropCoordinatesModel'
        }
    },
    additionalProperties: false
} as const;

export const ImageFocalPointModelSchema = {
    type: 'object',
    properties: {
        left: {
            type: 'number',
            format: 'double'
        },
        top: {
            type: 'number',
            format: 'double'
        }
    },
    additionalProperties: false
} as const;

export const PagedIApiContentResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/IApiContentResponseModel'
            }
        }
    },
    additionalProperties: false
} as const;

export const PagedIApiMediaWithCropsResponseModelSchema = {
    required: ['items', 'total'],
    type: 'object',
    properties: {
        total: {
            type: 'integer',
            format: 'int64'
        },
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/IApiMediaWithCropsResponseModel'
            }
        }
    },
    additionalProperties: false
} as const;

export const ProblemDetailsSchema = {
    type: 'object',
    properties: {
        type: {
            type: 'string',
            nullable: true
        },
        title: {
            type: 'string',
            nullable: true
        },
        status: {
            type: 'integer',
            format: 'int32',
            nullable: true
        },
        detail: {
            type: 'string',
            nullable: true
        },
        instance: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: {}
} as const;